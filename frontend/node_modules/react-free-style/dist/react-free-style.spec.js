"use strict";
/* global describe, it, beforeEach */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var React = require("react");
var PropTypes = require("prop-types");
var server_1 = require("react-dom/server");
var react_free_style_1 = require("./react-free-style");
describe('react free style', function () {
    var TestStyle;
    beforeEach(function () {
        TestStyle = react_free_style_1.create();
    });
    it('should render the main example', function () {
        var textStyle = TestStyle.registerStyle({
            backgroundColor: 'red'
        });
        var Component = (function (_super) {
            __extends(Component, _super);
            function Component() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            Component.prototype.render = function () {
                return React.createElement(react_free_style_1.StyleComponent, { Style: TestStyle }, React.createElement('div', { className: textStyle }, 'Hello world!'));
            };
            return Component;
        }(React.Component));
        var App = react_free_style_1.wrap(Component, TestStyle);
        chai_1.expect(server_1.renderToStaticMarkup(React.createElement(App))).to.equal("<div class=\"" + textStyle + "\">Hello world!</div>");
        chai_1.expect(react_free_style_1.rewind().toString()).to.equal("<style data-react-free-style=\"true\">." + textStyle + "{background-color:red}</style>");
    });
    it('should render the example dynamic styles', function () {
        var inlineStyle = '';
        var buttonStyle = TestStyle.registerStyle({
            backgroundColor: 'red',
            padding: 10
        });
        var ButtonComponent = (function (_super) {
            __extends(ButtonComponent, _super);
            function ButtonComponent() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            ButtonComponent.prototype.componentWillMount = function () {
                var style = this.context.freeStyle.registerStyle(this.props.style);
                inlineStyle = this.inlineStyle = style;
            };
            ButtonComponent.prototype.render = function () {
                return React.createElement('button', {
                    className: this.inlineStyle + " " + buttonStyle
                }, this.props.children);
            };
            ButtonComponent.contextTypes = {
                freeStyle: PropTypes.object.isRequired
            };
            return ButtonComponent;
        }(React.Component));
        var Component = (function (_super) {
            __extends(Component, _super);
            function Component() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            Component.prototype.render = function () {
                return React.createElement('div', {}, React.createElement(ButtonComponent, { style: { color: 'blue' } }, 'Hello world!'));
            };
            return Component;
        }(React.Component));
        var App = react_free_style_1.wrap(Component, TestStyle);
        chai_1.expect(server_1.renderToStaticMarkup(React.createElement(App))).to.equal('<div>' +
            '<button class="' + inlineStyle + ' ' + buttonStyle + '">Hello world!</button>' +
            '</div>');
        chai_1.expect(react_free_style_1.rewind().toString()).to.equal("<style data-react-free-style=\"true\">." + buttonStyle + "{background-color:red;" +
            ("padding:10px}." + inlineStyle + "{color:blue}</style>"));
    });
    it('should work with nested styles', function () {
        var NestedStyle = react_free_style_1.create();
        var appStyle = TestStyle.registerStyle({
            color: 'blue'
        });
        var buttonStyle = NestedStyle.registerStyle({
            backgroundColor: 'red'
        });
        var Button = react_free_style_1.wrap((function (_super) {
            __extends(class_1, _super);
            function class_1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            class_1.prototype.render = function () {
                return React.createElement('button', { className: buttonStyle }, 'Hello world!');
            };
            return class_1;
        }(React.Component)), NestedStyle);
        var Child = (function (_super) {
            __extends(Child, _super);
            function Child() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            Child.prototype.render = function () {
                return React.createElement('div', {}, React.createElement(Button));
            };
            return Child;
        }(React.Component));
        var App = react_free_style_1.wrap((function (_super) {
            __extends(class_2, _super);
            function class_2() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            class_2.prototype.render = function () {
                return React.createElement('div', { className: appStyle }, React.createElement(Child));
            };
            return class_2;
        }(React.Component)), TestStyle);
        chai_1.expect(server_1.renderToStaticMarkup(React.createElement(App))).to.equal('<div class="' + appStyle + '">' +
            '<div>' +
            '<button class="' + buttonStyle + '">Hello world!</button>' +
            '</div>' +
            '</div>');
        chai_1.expect(react_free_style_1.rewind().toString()).to.equal("<style data-react-free-style=\"true\">." + appStyle + "{color:blue}." + buttonStyle + "{background-color:red}</style>");
    });
    it('should work with stateless components', function () {
        var inlineStyle = '';
        var appStyle = TestStyle.registerStyle({
            background: 'red'
        });
        var ChildComponent = function (props, context) {
            inlineStyle = context.freeStyle.registerStyle({ color: 'blue' });
            return React.createElement("span", { className: inlineStyle }, "hello world");
        };
        ChildComponent.contextTypes = {
            freeStyle: PropTypes.object.isRequired
        };
        var Child = react_free_style_1.wrap(ChildComponent);
        var App = react_free_style_1.wrap(function () { return React.createElement("div", { className: appStyle },
            React.createElement(Child, null)); }, TestStyle);
        chai_1.expect(server_1.renderToStaticMarkup(React.createElement(App))).to.equal('<div class="' + appStyle + '">' +
            '<span class="' + inlineStyle + '">hello world</span>' +
            '</div>');
        chai_1.expect(react_free_style_1.rewind().toString()).to.equal("<style data-react-free-style=\"true\">." + appStyle + "{background:red}." + inlineStyle + "{color:blue}</style>");
    });
    it('should work as a hoc', function () {
        var withStyle = react_free_style_1.styled({
            button: {
                color: 'red'
            }
        });
        var Component = withStyle(Object.assign(function (props, context) {
            context.freeStyle.registerCss({ body: { color: 'blue' } });
            return React.createElement("div", { className: props.styles.button }, "Test");
        }, { contextTypes: react_free_style_1.ReactFreeStyleContext }));
        chai_1.expect(server_1.renderToStaticMarkup(React.createElement(Component))).to.equal('<div class="' + withStyle.styles.button + '">Test</div>');
        chai_1.expect(react_free_style_1.rewind().toString()).to.equal("<style data-react-free-style=\"true\">." + withStyle.styles.button + "{color:red}body{color:blue}</style>");
    });
});
//# sourceMappingURL=react-free-style.spec.js.map
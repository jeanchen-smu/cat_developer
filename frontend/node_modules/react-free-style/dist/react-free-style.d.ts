/// <reference types="react" />
import React = require('react');
import PropTypes = require('prop-types');
import * as FreeStyle from 'free-style';
import { create } from 'free-style';
/**
 * Re-export the `free-style` module.
 */
export { FreeStyle, create };
/**
 * Check whether we can render on the server/browser.
 */
export declare const canUseDOM: boolean;
/**
 * Create a class for passing down the style context.
 */
export declare class GlobalStyleContext {
    Style: FreeStyle.FreeStyle;
    prevChangeId: number;
    element: HTMLStyleElement;
    constructor();
    changed(): void;
}
/**
 * Object used for dynamic styles over the context.
 */
export declare type StyleContext = Pick<FreeStyle.FreeStyle, 'registerStyle' | 'registerCss' | 'registerHashRule' | 'registerKeyframes' | 'registerRule'> & {
    Style: FreeStyle.FreeStyle;
    mount(): void;
    unmount(): void;
};
/**
 * Create the context object for style components.
 */
export declare function createStyleContext(global: GlobalStyleContext): StyleContext;
/**
 * Get the current render styles.
 */
export declare function rewind(): Peek;
/**
 * The interface for "peeking" results.
 */
export declare class Peek {
    css: string;
    constructor(css: string);
    toComponent(): React.DetailedReactHTMLElement<{
        [x: string]: boolean | {
            __html: string;
        };
        dangerouslySetInnerHTML: {
            __html: string;
        };
    }, HTMLElement>;
    toString(): string;
    toCss(): string;
}
/**
 * Peek at the current styles without clearing.
 */
export declare function peek(): Peek;
/**
 * The free-style context object for React.
 */
export declare const ReactFreeStyleContext: {
    freeStyle: PropTypes.Validator<any>;
};
/**
 * Context for child components.
 */
export interface ReactFreeStyleContext {
    freeStyle: StyleContext;
}
export interface StyleComponentProps {
    Style: FreeStyle.FreeStyle;
}
/**
 * Create a style component.
 */
export declare class StyleComponent extends React.Component<StyleComponentProps, {}> {
    static displayName: string;
    static childContextTypes: {
        freeStyle: PropTypes.Validator<any>;
    };
    _freeStyle: StyleContext;
    getChildContext(): ReactFreeStyleContext;
    componentWillUpdate(nextProps: StyleComponentProps): void;
    componentWillMount(): void;
    componentWillUnmount(): void;
    render(): React.ReactElement<any>;
}
/**
 * Wrap a component instead of adding it to the markup manually.
 */
export declare function wrap<P>(Component: React.ComponentType<P>, Style?: FreeStyle.FreeStyle, name?: string): React.StatelessComponent<P>;
/**
 * Input object for style HOC.
 */
export declare type StyleSheet<T extends string> = {
    [K in T]: FreeStyle.Styles;
};
/**
 * Styles as a component prop.
 */
export declare type StyleMap<T extends string> = {
    [K in T]: string;
};
/**
 * Utility for registering a map of styles.
 */
export declare function registerStyleSheet<T extends string>(Style: FreeStyle.FreeStyle, styleSheet: StyleSheet<T>): StyleMap<T>;
/**
 * Props passed to the HOC child.
 */
export declare type StyledProps<T extends string> = {
    styles: StyleMap<T>;
};
/**
 * Create a HOC for styles.
 */
export declare function styled<T extends string>(styleSheet?: StyleSheet<T>, hash?: FreeStyle.HashFunction, debug?: boolean): (<P>(Component: React.ComponentType<P & StyledProps<T>>) => React.StatelessComponent<P>) & {
    Style: FreeStyle.FreeStyle;
    styles: StyleMap<T>;
};

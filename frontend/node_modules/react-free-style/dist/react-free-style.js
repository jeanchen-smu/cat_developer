"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var PropTypes = require("prop-types");
var FreeStyle = require("free-style");
exports.FreeStyle = FreeStyle;
var free_style_1 = require("free-style");
exports.create = free_style_1.create;
/**
 * Tag the element for rendering later.
 */
var STYLE_ATTRIBUTE = 'data-react-free-style';
/**
 * Check whether we can render on the server/browser.
 */
exports.canUseDOM = !!(typeof window !== 'undefined' &&
    window.document &&
    window.document.createElement);
/**
 * Create a class for passing down the style context.
 */
var GlobalStyleContext = (function () {
    function GlobalStyleContext() {
        this.Style = free_style_1.create();
        this.prevChangeId = this.Style.changeId;
        if (exports.canUseDOM) {
            this.element = document.querySelector("style[" + STYLE_ATTRIBUTE + "]");
            if (!this.element) {
                this.element = document.createElement('style');
                this.element.setAttribute('type', 'text/css');
                this.element.setAttribute(STYLE_ATTRIBUTE, 'true');
                document.head.appendChild(this.element);
            }
        }
    }
    GlobalStyleContext.prototype.changed = function () {
        if (exports.canUseDOM && this.Style.changeId !== this.prevChangeId) {
            this.prevChangeId = this.Style.changeId;
            this.element.textContent = this.Style.getStyles();
        }
    };
    return GlobalStyleContext;
}());
exports.GlobalStyleContext = GlobalStyleContext;
/**
 * Create the context object for style components.
 */
function createStyleContext(global) {
    var Style = free_style_1.create();
    function mount() {
        global.Style.merge(Style);
        global.changed();
    }
    function unmount() {
        global.Style.unmerge(Style);
        global.changed();
    }
    function wrap(invoke) {
        unmount();
        var result = invoke();
        mount();
        return result;
    }
    return {
        registerStyle: function (styles, displayName) {
            return wrap(function () { return Style.registerStyle(styles, displayName); });
        },
        registerCss: function (css) {
            return wrap(function () { return Style.registerCss(css); });
        },
        registerHashRule: function (prefix, styles, displayName) {
            return wrap(function () { return Style.registerHashRule(prefix, styles, displayName); });
        },
        registerKeyframes: function (keyframes, displayName) {
            return wrap(function () { return Style.registerKeyframes(keyframes, displayName); });
        },
        registerRule: function (rule, styles) {
            return wrap(function () { return Style.registerRule(rule, styles); });
        },
        Style: Style,
        mount: mount,
        unmount: unmount
    };
}
exports.createStyleContext = createStyleContext;
/**
 * Create a global style container.
 */
var global = new GlobalStyleContext();
/**
 * Get the current render styles.
 */
function rewind() {
    if (exports.canUseDOM) {
        throw new TypeError('You must call `rewind()` on the server. Call `peek()` to read the current styles.');
    }
    var styles = peek();
    global = new GlobalStyleContext();
    return styles;
}
exports.rewind = rewind;
/**
 * The interface for "peeking" results.
 */
var Peek = (function () {
    function Peek(css) {
        this.css = css;
    }
    Peek.prototype.toComponent = function () {
        return React.createElement('style', (_a = {},
            _a[STYLE_ATTRIBUTE] = true,
            _a.dangerouslySetInnerHTML = { __html: this.css },
            _a));
        var _a;
    };
    Peek.prototype.toString = function () {
        return "<style " + STYLE_ATTRIBUTE + "=\"true\">" + this.css + "</style>";
    };
    Peek.prototype.toCss = function () {
        return this.css;
    };
    return Peek;
}());
exports.Peek = Peek;
/**
 * Peek at the current styles without clearing.
 */
function peek() {
    return new Peek(global.Style.getStyles());
}
exports.peek = peek;
/**
 * The free-style context object for React.
 */
exports.ReactFreeStyleContext = {
    freeStyle: PropTypes.object.isRequired
};
/**
 * Create a style component.
 */
var StyleComponent = (function (_super) {
    __extends(StyleComponent, _super);
    function StyleComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._freeStyle = createStyleContext(global);
        return _this;
    }
    StyleComponent.prototype.getChildContext = function () {
        return {
            freeStyle: this._freeStyle
        };
    };
    StyleComponent.prototype.componentWillUpdate = function (nextProps) {
        if (this.props.Style.id === nextProps.Style.id)
            return;
        this._freeStyle.unmount();
        this._freeStyle.Style.unmerge(this.props.Style);
        this._freeStyle.Style.merge(nextProps.Style);
        this._freeStyle.mount();
    };
    StyleComponent.prototype.componentWillMount = function () {
        this._freeStyle.Style.merge(this.props.Style);
        this._freeStyle.mount();
    };
    StyleComponent.prototype.componentWillUnmount = function () {
        this._freeStyle.Style.unmerge(this.props.Style);
        this._freeStyle.unmount();
    };
    StyleComponent.prototype.render = function () {
        return React.Children.only(this.props.children);
    };
    StyleComponent.displayName = 'Style';
    StyleComponent.childContextTypes = exports.ReactFreeStyleContext;
    return StyleComponent;
}(React.Component));
exports.StyleComponent = StyleComponent;
/**
 * Wrap a component instead of adding it to the markup manually.
 */
function wrap(Component, Style, name) {
    if (Style === void 0) { Style = free_style_1.create(); }
    if (name === void 0) { name = 'anonymous'; }
    var Wrapped = function (props) {
        return React.createElement(StyleComponent, { Style: Style }, React.createElement(Component, props));
    };
    Wrapped.displayName = "Wrap<" + (Component.displayName || Component.name || name) + ">";
    return Wrapped;
}
exports.wrap = wrap;
/**
 * Utility for registering a map of styles.
 */
function registerStyleSheet(Style, styleSheet) {
    var styles = Object.create(null);
    for (var _i = 0, _a = Object.keys(styleSheet); _i < _a.length; _i++) {
        var key = _a[_i];
        styles[key] = Style.registerStyle(styleSheet[key], key);
    }
    return styles;
}
exports.registerStyleSheet = registerStyleSheet;
/**
 * Create a HOC for styles.
 */
function styled(styleSheet, hash, debug) {
    if (styleSheet === void 0) { styleSheet = {}; }
    var Style = free_style_1.create(hash, debug);
    var styles = registerStyleSheet(Style, styleSheet);
    return Object.assign(function (Component) {
        var Styled = function (props) {
            return React.createElement(StyleComponent, { Style: Style }, React.createElement(Component, Object.assign({}, props, { styles: styles })));
        };
        Styled.displayName = "Styled<" + (Component.displayName || Component.name || 'anonymous') + ">";
        return Styled;
    }, { Style: Style, styles: styles });
}
exports.styled = styled;
//# sourceMappingURL=react-free-style.js.map